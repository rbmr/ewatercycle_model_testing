

# Define the forcings needed for the model here
# the filename is either the name of the pcraster map-stack or the name of the 
# variable in the netcdf input file
[inputmapstacks]
Precipitation = /inmaps/P
EvapoTranspiration = /inmaps/PET
Temperature = /inmaps/TEMP
# this is optional inflow (positive) or outflow (negative) of the kin-wave reservoir
Inflow = /inmaps/IF 



[modelparameters]
# Format:
# name=stack,type,default
# example:
# RootingDepth=monthlyclim/ROOT,monthyclim,100,1

# - name - Name of the parameter (internal variable)
# - stack - Name of the mapstack (representation on disk or in mem) relative to case
# - type - Type of parameter (default = static)
# - default - Default value if map/tbl is not present

#Possible types are::
# - staticmap: Read at startup from map 
# - statictbl: Read at startup from tbl
# - timeseries: read map for each timestep
# - monthlyclim: read a map corresponding to the current month (12 maps in total)
# - dailyclim: read a map corresponding to the current day of the year
# - hourlyclim: read a map corresponding to the current hour of the day (24 in total) (not implemented yet)
#RootingDepth=monthlyclim/ROOT,monthlyclim,75,1

[run]
# either a runinfo file or a start and end-time are required
#runinfo=runinfo.xml
starttime=1991-02-01 00:00:00
endtime=1991-03-01 00:00:00
# required, base timestep of the model
timestepsecs = 86400
#start model with cold state
reinit=1
#skipfirst=1

# Model parameters and settings
[model]
modeltype= sbm

AnnualDischarge=2290
# Alpha for wiver-width estimation 5 for mountain stream 60 for the river rhine
Alpha=120
ModelSnow=0
ScalarInput=0
InterpolationMethod=inv
WIMaxScale=0.8
Tslice=1
# Maximum upstream distance to update the flow in metres
UpdMaxDist=300000.0
#SubCatchFlowOnly = 1
origTopogLateral = 1


#DynamicVegetation=1

[misc]
#mapSaveInterval=365

[framework]
# outputformat for the *dynamic* mapstacks (not the states and summary maps)
# 1: pcraster
# 2: numpy
# 3: matlab

# netcdfoutput requires also outputformat = 1 (default) and additionally the name of the file
netcdfoutput = outmaps.nc
#netcdfstatesoutput = states.nc
#netcdfstaticoutput = outsum.nc
netcdfinput= inmaps.nc
#netcdfstatesinput = instates.nc
#netcdfstaticinput = staticmaps.nc
netcdfwritebuffer=10
netcdf_least_significant_digit=2
#netcdf_format=NETCDF3_CLASSIC



[layout]
# if set to zero the cell-size is given in lat/long (the default)
sizeinmetres = 0




[outputmaps]
self.Inflow=iflow

self.RiverRunoff=run
#self.SubCellFrac=scf
#self.Inwater=inw
#self.DistToUpdPt=dist
#self.SnowMelt=sno
#self.FirstZoneFlux=fzf
#self.TopoLdd=ldd
self.InwaterMM=iwm
#self.watbal=wat
self.PotenEvap=PET
self.Precipitation=P

[summary]
self.MaxLeakage=MaxLeakage.map
# Save and average these per LU type

[summary_sum]
self.Precipitation=Sumprecip.map

[summary_max]
self.Precipitation=maxprecip.map

[summary_min]
#self.Temperature=mintemp.map

[summary_avg]
self.Precipitation=avgprecip.map

[outputcsv_0]
samplemap=staticmaps/wflow_landuse.map
self.Transfer=tra_lu.csv

# gauge output
[outputtss_0]
samplemap=staticmaps/wflow_gauges.map
self.RiverRunoff=run.tss
self.WaterLevelR=lev.tss

[outputtss_1]
samplemap=staticmaps/wflow_gauges.map
self.ActLeakage=lek.tss
# Save and sample these at gauge locations
